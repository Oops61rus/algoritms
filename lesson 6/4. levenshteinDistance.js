// `D. Расстояние по Левенштейну
// Ограничение времени 1 секунда
// Ограничение памяти 256Mb
// Ввод стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt
// Дана текстовая строка. С ней можно выполнять следующие операции:
// 1. Заменить один символ строки на другой символ.
// 2. Удалить один произвольный символ.
// 3. Вставить произвольный символ в произвольное место строки.
// Например, при помощи первой операции из строки «СОК» можно получить строку «СУК», при помощи второй операци — строку «ОК», при помощи третьей операции — строку «СТОК».
// Минимальное количество таких операций, при помощи которых можно из одной строки получить другую, называется стоимостью редактирования или расстоянием Левенштейна.
// Определите расстояние Левенштейна для двух данных строк.
//
// Формат ввода
// Программа получает на вход две строки, длина каждой из которых не превосходит 1000 символов, строки состоят только из заглавных латинских букв.
// Формат вывода
// Требуется вывести одно число — расстояние Левенштейна для данных строк.`



// const fs = require('fs')
// const fileContent = fs.readFileSync("input.txt", "utf8");
// const [string1, string2] = fileContent.toString().trim().split('\n');

// function getLevenshteinDistance(A, B) {
//   let n = A.length;
//   let m = B.length;
//   let F = Array.from({ length: n + 1 }, () => Array(m + 1).fill(0));
//   for (let i = 0; i <= n; ++i) {
//     F[i][0] = i;
//   }
//   for (let j = 0; j <= m; ++j) {
//     F[0][j] = j;
//   }
//   for (let i = 1; i < n + 1; i++) {
//     for (let j = 1; j < m + 1; j++) {
//       F[i][j] = Math.min(F[i - 1][j], F[i][j - 1]) + 1;
//       F[i][j] = Math.min(F[i][j], F[i - 1][j - 1] + (A[i - 1] !== B[j - 1] ? 1 : 0));
//       if (i >= 2 && j >= 2 && (A[i - 2] === B[j - 1] && A[i - 1] === B[j - 2])) {
//         F[i][j] = Math.min(F[i][j], F[i - 2][j - 2] + 1);
//       }
//     }
//   }
//   return F[n][m];
// }

// function getLevenshteinDistance(A, B) {
//   let n = A.length;
//   let m = B.length;
//   let F = Array.from(Array(n + 1), () => new Array(m + 1).fill(0));
//   for (let i = 0; i <= n; i++) {
//     F[i][0] = i;
//   }
//   for (let j = 0; j <= m; j++) {
//     F[0][j] = j;
//   }
//   for (let i = 1; i <= n; i++) {
//     for (let j = 1; j <= m; j++) {
//       F[i][j] = Math.min(F[i - 1][j], F[i][j - 1]) + 1;
//       F[i][j] = Math.min(F[i][j], F[i - 1][j - 1] + (A[i - 1] !== B[j - 1] ? 1 : 0));
//       if (i >= 2 && j >= 2 && A.slice(i - 2, i) === B.slice(j - 2, j).split('').reverse().join('')) {
//         F[i][j] = Math.min(F[i][j], F[i - 2][j - 2] + 1);
//       }
//     }
//   }
//   return F[n][m];
// }

// const result = getLevenshteinDistance(string1.trim(), string2.trim());
// fs.writeFileSync('output.txt', result.toString());

console.log(getLevenshteinDistance('ABCDEFGH', 'ACDEXGIH'), 3);
console.log(getLevenshteinDistance("XABCDE", "ACBYDF"), 4);
console.log(getLevenshteinDistance("programma", "pogarmmma"), 3);
console.log(getLevenshteinDistance("cut", "set"), 2);
console.log(getLevenshteinDistance(
  'AECIJGFHGDJFFHIEIGCAIEMIBMBLEMBBGLDJJCGIBGDDDMFLFHGHHGLEHCAGFEDAAHAHLBFMEGMIICHAAJMBFBFGALHKDDMABFKHMDHGGIHJAKCJCBCEFFJEMEMIELHCBIJAFFDAIEMGDLIDKMKMFAKAAIEFJLHJECGFFFJEEFMCIHADAIKMHDJELKHAFMMBFIJHDGIBJDKFDMLMEDIEMHBIJKFHCMHJCDIILFKBIEJKFKILJCAAMLBIJCBGHFDMBFKJJHCFBEKGJBHBJAEJGMCJMCBJHJAFDHGGEDLKICLMBECIAACDDFMDFCMKLGMMMJJHDFIJHJGFMCDKKDIJMFFBBHBDJJJEEFEILDDKCBEIFADIMGCADMGHFLDELDFFDEFDGDEIGBBJIBGJGHIJFKJKMBFILCBICAELMMALCDIMADHDACBCLDCEFCCCHHFFLLDMAEGGLFFHBJJMMHIIHEBIDLIDCHFGMIKJBEDJMIELDGJCGFFBHDILEAEMLIGKBGJFACCCFFKMDDFAECIBKDECCBHJLIBGJAKEBKBFEKMIJBMMCIEBMHAACGGLIMJIFAHKJDHBGMBCLBKMKLEBFFKCKGIFIGILHJDJHLHFAKIFJDFFCAKHMEJHDHCGFKCGCKAJGDCLEADAHGABDMGKBGCCJDICLEDHDLKMKKIEEHGCCCGEFMIHKDFLGFJMKKMLJJKIJMADFBHEJHJKBBJGDIKDCEFMCBKIJHFAEIADAHIFEECEGGACEGBGDDMAFBCHFAJEJHMFJEDKHBCKBCHBGJMCGFJDHCEGLEHEBCLFMEFMBFEMJEMBFJDGADLCFCIAHIAIKBABFAIDLCEHMADJADFGFAAGDDLFLJDABDJLCKDMMLIKGEDGCLEJEKAJABJEBLBCKKLFCLAFIIHHKKFDLKIHBKKJEEJIKGMLGGLLDCCACDHHFJDKIEMLHCCFMGILFAKMJLIBMFEBMAMAAJEKLEGFDIEBHEHJMDGLJGLL',
  'MDDKIGFBFGIFIGLLCMCECGCLAFDHEIKIBAHGKEKAKHCKEMHBCHGEGMHLCHEFHJMIEBMBFJMBCFBICJFCGGHFAKFIAIFDKLGADKBFDAJAGHCMBCELAHDDACGHJCLAGKIHHFMFLEGMFKCCGKHHFJKADHBFBFAGHBAJHKKKLGBAJGBFHDHFLEJJIAGEGELMEKDHBHKMMIGKMLGEJFMCILBLECMHCCKFJCGGJEMGEBIIBDKCMCLDJMHIEKKFIAELCHEHKHAMKIMJFDLHJEIEKIDBIFIJGALHCKMLAEFGIJJLCJBJIMDFDDGCMHBHEALFDHGBKKMDGBEIMICHLABMIAEBJBFBFAMEMDDAJFMMICLJFGGLMCDECMAAGCJJLBHCGBMLMEIACGMBAMABDFCGABAFGGFBCKLAKBJJMMIGGFEBGKMCKCIIIBEDIFLEKKGIGAJECFGIDCLEBJDMMHLBFEFBHLIMJDGJJHJBICJCDKFKHMDKECEICKHFDCKBMKBJEHKLKKHEBKHMELBJGHIELDGGCAFBBGBCJBJAEGGMCDIDFMIBIAKAMIIBKBEIAJAKJLHJHKHMLAHDKEBCHLCIJKGJILIMGHKIDIHCGCGIFAHHJBHEFCJKIDBJCLGKBLKCAEFHCGCFAGKEGJHGGFFCFAFKHBEHEHFFHGCAKMABMFDCCCHDLBAJLMFKBJHJAKMJIGEMMMHCJKEKACAAGJABFKEMFFHAHHJEHLFEAJLBLABIDECELBHCFFABEDGDCMAGEIKEFIGMGJCIJLGLLHEJGGKKLHICJHDDCKLLGFDJCMBEGIMGIAHBKCIAEDCKDEACGJMCFBKHCEKCJDKGBJDBKDLJGCJHCBFBLADMDLJAFCBHMBLJGAGIDHLKIKLHKBADGBEJIBELDACHAEDLEELLHDIIACMHEAKDGDHDEEHFDLKBBJCAEBLBKFIHEGCCJGBLEKKDFAAMIIMKDMIDHLCFMFDGLJHGICDJKEHCBAMFIJME'
), 793);
console.log(getLevenshteinDistance('IELIEHAMIDFGAEICJKIEMGEMFNCJCCMMBKGLAIDIBMHJNAKAAEBNIFDBBKLLCKDKMDNIKMAHMGJJEBHLCEFNANKFHEMKAFNIFJDEKKHFKEMNKGBMLNAAJFFENBCDCEMBKGBKLIFEDGKCIKCJJJBAMHHMGAJEIDBDEJNGFHENLGNGMNEFJNMFHCKBMNKMAAIMMFLBHDMAICMKABDHNFICKKMCCKFHENHKIGHIIILFCHKCCNGBFIHKMFBECENBBCKLINBAADDJLKMIEAMBCNNFAHNBEEIEFAKEAKAHGGKEMHJGBCEAGLMKAMLDJEKDIMFFAHBJDDBKJBAGNIHGECLBHENCDGDBGAJFNNAIGHIFCNBDIBDJNMBLMFFFGCCGFHEABJNKENACDECLFKINGAFEBEGKNJEDDEKCFMJAMKJGFKDGHLIAAEEMDLFFEJFJNINHBGHMNKILNBJBALFHLMIHJDJCJACNMHKGILCHCBFHFLKNGHIAADKBFAJNENGALIDKJJMFJNGNAGFJIDDAJMGELGNKGFDHMIKMKHHEJGBBDMABFHKIJJCIIBBHNEDBBMJKDDANKGGBJCNKJNLGENKDFLKDHELLCNFGKNLCNKDFJNCBDICGFENALMFJJHCCJDMGNNMKIKJKCNHFNLCLKDNGLFKANHMNMLCIGGFJAIGCCLFGJCDBACNEGCIBBHGDMEIACNMFFHCFICNNKIJDCACJFFIIGJFFJGHBDENHGACHNIGFBKMEMCJICGKCBFFBCFGLKJHNHICMDBNMFAIIDFEFADCNDHFMEHIEMJCEFBLJNBGNLFHIBEMICBGJHJAKEHHAGHCEIBFBGGDDEAJFJGGNMNDJKGFLEAAAJBKBLHKECHNFJNIMNNKNMCIBFNBBEKLFADBHFHGFLKDBIILJHBDHAHIHNKJICLBKCMFGHINHBGFJEABCBDLEGCBCAIHJIEFDLMBACIALBINHMLHNBNFANHFDHMICHIKFKALIBAGI',
'EDIHEJHIHGMKLEMIJGLGBILMDIMBFDABAAEKJHMCBLMLFGBBAECDBNKHCMKACHKMEEDFFAIFEMHGIBNCDLNLAMAMKJIDNJBLLABGJDFNJCNMIGCJDFFJIAGEFGDENLHAFKIKFBHNFFECDEHGEFLELNGCLLMEKFNAFNMKGALHGCFBMDBADKBLDLKFEJGLEAKKKNLNLDFDEDCDKAHAIHDMIGMIHKJEEHAADNAMBEDEEGCLIEDACIKIKKNMAIINHILNNCGNDCDFDANLNFDDCIMKCMLGGGFIJEAMAKKMMGFMBDKFCCJFABCNDAMEDGJDKHAIAIIENKKFDCINNBMENJMANIBCLBLKMMLCDLLANJINDNDHCCLBDJNDEMNGCNKJAJDFLIAIAJBKHKIIBFHGMIEAKJILIGEBKDNLAGGKIEBDGABILMDDNNLALMFJHCABBGEJCHMCJGNFCMHAFKGABEAACINAFNAAECFFLAINECJJFIMBDFJHIAHMDHGDIBLHFDJLDEMMLAKKCKFGENJAMHJHEANKAFCLENLGKMCNIMIAJBNDNKKLEJGEGAFMMADIBGNNMEADHJEIGGEEABANMDLGKDNDCGHEHKFECMLDIJMECMDEGNJNIIJDLCGMJAEIMBHBFEIKFBJDCBGBKNCJKIBIKKCDMDCBMMJALCLIDMBLKEBNLAFCBKGNNNGNMBNBMABCGLCCFJBFICJDEGLFBKGCNNEFBCFJFGHDNAFJGBLJFBAFGGNNDDLEBBABMKINFHNNAHABJCJLEFEADFCKHCJMELNEIAHCEILHAFIDFLKIKNKJEGJLDJCJJHIMBEFFKMJGMCMKIFMEEDKBNFNBIALCJFDMEJINJIBNNFGHJHNJDBNMHNMHNFMJDMFGILNKNBJEEBGJKDJKDIHJHABHGLIHMIHABHHDFHFBIKCMLNMJFDMMMEHGDLNKHINFJNAMFLACHCMCIGMBGJGGACNGKEDDJMEBAFGLBDCDCAMDJEGD'
), 805)


// const fs = require('fs')
// const fileContent = fs.readFileSync("input.txt", "utf8");
// const [string1, string2] = fileContent.toString().trim().split('\n');

function minimin(a, b, c) {
  return Math.min(Math.min(a, b), c);
}

function meme(i, j) {
  if (i === j) {
    return 0;
  } else {
    return 1;
  }
}

function getLevenshteinDistance(s1, s2) {
  let m = s1.length;
  let n = s2.length;
  let dp = Array.from(Array(n + 1), () => new Array(m + 1).fill(0))

  for (let i = 0; i <= m; i++) {
    for (let j = 0; j <= n; j++) {
      if (i === 0 && j === 0) {
        dp[i][j] = 0;
        continue;
      }
      if (i === 0 && j > 0) {
        dp[i][j] = j;
        continue;
      }
      if (i > 0 && j === 0) {
        dp[i][j] = i;
        continue;
      }
      if (j > 0 && i > 0) {
        dp[i][j] = minimin(dp[i][j - 1] + 1, dp[i - 1][j] + 1, dp[i - 1][j - 1] + meme(s1.charAt(i - 1), s2.charAt(j - 1)));
      }
    }
  }

  return dp[m][n];
}

// const result = getLevenshteinDistance(string1.trim(), string2.trim());
// fs.writeFileSync('output.txt', result.toString());
