// `F. Космическое поселение
// Ограничение времени\t1 секунда
// Ограничение памяти\t64Mb
// Ввод\tстандартный ввод или input.txt
// Вывод\tстандартный вывод или output.txt
// Для освоения Марса требуется построить исследовательскую базу. База должна состоять из n одинаковых модулей, каждый из которых представляет собой прямоугольник.
//
// Каждый модуль представляет собой жилой отсек, который имеет форму прямоугольника размером a на b метров. Для повышения надежности модулей инженеры могут добавить вокруг каждого модуля слой дополнительной защиты. Толщина этого слоя должна составлять целое число метров, и все модули должны иметь одинаковую толщину дополнительной защиты. Модуль с защитой, толщина которой равна d метрам, будет иметь форму прямоугольника размером (a+2d)(b+2d) метров.
//
// Все модули должны быть расположены на заранее подготовленном прямоугольном поле размером wh метров. При этом они должны быть организованы в виде регулярной сетки: их стороны должны быть параллельны сторонам поля, и модули должны быть ориентированы одинаково.
//
// Требуется написать программу, которая по заданным количеству и размеру модулей, а также размеру поля для их размещения, определяет максимальную толщину слоя дополнительной защиты, который можно добавить к каждому модулю.
//
// Формат ввода
// Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h (1 ≤ n, a, b, w, h ≤ 1018). Гарантируется, что без дополнительной защиты все модули можно разместить в поселении описанным образом.
//
// Формат вывода
// Выходной файл должен содержать одно целое число: максимальную возможную толщину дополнительной защиты. Если дополнительную защиту установить не удастся, требуется вывести число 0.`


// const fs = require('fs')
// let fileContent = fs.readFileSync("input.txt", "utf8");
// const [n, a, b, w, h] = fileContent.toString().trim().split(' ').map(Number);

function marsBase(countModules, moduleWidth, moduleHeight, baseWidth, baseHeight) {
  let left = 0
  let right = Math.min(baseWidth, baseHeight)

  while (left + 1 < right) {
    let shield = Math.floor((left + right) / 2)
    const floorWW = Math.floor(baseWidth / (moduleWidth + 2 * shield))
    const floorHH = Math.floor(baseHeight / (moduleHeight + 2 * shield))
    const floorHW = Math.floor(baseHeight / (moduleWidth + 2 * shield))
    const floorWH = Math.floor(baseWidth / (moduleHeight + 2 * shield))

    let max = Math.max((floorWW) * (floorHH), (floorHW) * (floorWH))

    if(max >= countModules) {
      left = shield
    } else {
      right = shield
    }
  }

  return left.toString()
}

// const result = marsBase(n, a, b, w, h);
// fs.writeFileSync('output.txt', result.toString());


console.log(marsBase(1, 1, 1, 1, 1));
console.log(marsBase(1, 1, 1, 3, 3));